import os
import json
import requests
import zipfile
from bs4 import BeautifulSoup
from datetime import datetime
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.common.action_chains import ActionChains
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
import time

# Diretório de download das extensões
DOWNLOAD_DIR = "exploit_permissions/dump"
os.makedirs(DOWNLOAD_DIR, exist_ok=True)

# URL base do Chrome Web Store
BASE_URL = "https://chrome.google.com/webstore/category/extensions"
PATHS = [
    "/productivity/communication",
]

def setup_driver():
    """Configura o driver do Selenium."""
    options = webdriver.ChromeOptions()
    options.add_argument("--headless")  # Execute em modo headless, sem abrir a janela do navegador
    driver = webdriver.Chrome(options=options)
    return driver

def load_all_extensions(driver, path):
    """Carrega todas as extensões até que o botão 'Carregar mais' não esteja mais disponível."""
    print(f"Acessando: {path}")
    driver.get(path)  # Acesse a URL específica do caminho
    time.sleep(2)  # Aguarda um pouco para que a página carregue

    while True:
        try:
            # Aguarda até que o botão "Carregar mais" esteja visível usando o novo XPath
            load_more_button = WebDriverWait(driver, 10).until(
                EC.visibility_of_element_located((By.CSS_SELECTOR, "button[jsname='t6Kl7b']"))
            )
            ActionChains(driver).move_to_element(load_more_button).click().perform()
            print("Clicou em 'Carregar mais'")
            time.sleep(2)  # Aguarda um pouco para que novas extensões sejam carregadas

        except Exception as e:
            print("Não há mais extensões para carregar ou erro ao clicar no botão:", e)
            print("Conteúdo atual da página:")
            # print(driver.page_source)  # Imprime o HTML atual da página
            break

def get_extension_ids(driver):
    """Extrai os IDs das extensões da página atual."""
    soup = BeautifulSoup(driver.page_source, 'html.parser')
    extension_ids = []
    for link in soup.find_all('a', href=True):
        if './detail/' in link['href']:
            extension_id = link['href'].split('/')[-1]
            extension_ids.append(extension_id)
    
    return list(set(extension_ids))

def download_extension(extension_id):
    """Baixa a extensão no formato CRX."""
    url = f"https://clients2.google.com/service/update2/crx?response=redirect&prodversion=91.0&acceptformat=crx2,crx3&x=id%3D{extension_id}%26uc"
    response = requests.get(url, stream=True)
    
    if response.status_code == 200:
        crx_path = os.path.join(DOWNLOAD_DIR, f"{extension_id}.crx")
        with open(crx_path, 'wb') as file:
            file.write(response.content)
        return crx_path
    
    return None

def extract_manifest(crx_path):
    """Extrai o manifest.json de um arquivo CRX."""
    with zipfile.ZipFile(crx_path, 'r') as zip_ref:
        for file in zip_ref.namelist():
            if 'manifest.json' in file:
                with zip_ref.open(file) as manifest_file:
                    return json.load(manifest_file)
    return None

def save_all_manifests(manifests):
    """Salva todas as informações das extensões em um único arquivo JSON."""
    json_path = os.path.join(DOWNLOAD_DIR, "extensions_info.json")
    
    # Criar o dicionário com as informações
    data_to_save = {
        "extensions_count": len(manifests),
        "extraction_date": datetime.now().isoformat(),
        "extensions": manifests
    }
    
    with open(json_path, 'w', encoding='utf-8') as file:
        json.dump(data_to_save, file, indent=4, ensure_ascii=False)

if __name__ == "__main__":
    all_manifests = []
    driver = setup_driver()
    
    for path in PATHS:
        full_path = BASE_URL + path
        load_all_extensions(driver, full_path)  # Carrega extensões para cada caminho
        extension_ids = get_extension_ids(driver)
        
        for ext_id in extension_ids:
            print(f"Baixando extensão: {ext_id}")
            crx_path = download_extension(ext_id)
            
            if crx_path:
                manifest = extract_manifest(crx_path)
                if manifest:
                    name = manifest.get("name", "unknown_extension")
                    permissions = manifest.get("permissions", [])
                    host_permissions = manifest.get("host_permissions", [])
                    manifest_version = manifest.get("manifest_version", "unknown")
                    
                    all_manifests.append({
                        "id": ext_id,
                        "name": name,
                        "permissions": permissions,
                        "host_permissions": host_permissions,
                        "manifest_version": manifest_version
                    })
                os.remove(crx_path)  # Remove o arquivo CRX após extração
    
    save_all_manifests(all_manifests)
    driver.quit()  # Fecha o navegador após a execução
